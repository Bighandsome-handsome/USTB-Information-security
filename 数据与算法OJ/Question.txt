注意：语言请选择C++ 11.

寻找丢失的筷子
时间限制: 1000 ms内存限制: 65536 KB
问题描述
小明买了N对筷子，每对筷子由两只长度相同的筷子组成，不同对筷子的长度也可能相同。每只筷子长度均为正整数。
一天，马虎的小明丢失了两只长度不同的筷子，只剩下2N-2只筷子，他想知道丢失的两只筷子的长度分别是多少？（长度按从小到大排列）
输入格式
第一行一个整数N，表示筷子的对数。
接下来2N-2行，每行一个整数，依次表示剩下2N-2只筷子的长度。 
输出格式
两个整数（按从小到大排列），表示丢失筷子的长度。





图最短路径
时间限制: 1000 ms内存限制: 45536 KB
问题描述
在一张无向图中求源点到终点的最短距离（本题可能会求多对<源点, 终点> 的最短距离），
图中边长为整数1或2或3。
题目保证询问的点对之间可达。
输入格式
第1行：
#顶点数n #边数m  #问题数q（即 <源点, 终点>pairs数）   (n <= 100000, m <= 200000, q<=250)
第2行至m+1 行，每行描述一条边：
边的第一个顶点   边的第二个顶点  边长
...
第m+2行至m+q+1行，每行描述一对 <源点, 终点>编号：
第一对的源点编号   第一对的终点编号
...
 
<注：数据的间隔都是用空格> 
输出格式
输q对<源点, 终点>的最短距离值, 每行一个
 



大规模稀疏线性方程组的迭代求解
时间限制: 1000 ms内存限制: 20000 KB
问题描述
本题目标为求解大规模稀疏线性方程组：Ax = b，其中A是稀疏矩阵（在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵）。
本次实验中给出的矩阵 A 均为维数不小于 1000不大于55000 的非奇异方阵，解的准确程度由残差值 ||AX - b||2给出，要求残差值小于 0.1。
输入格式
第 1 行：两个整数，分别是矩阵 A 的行（列）数 m，矩阵 A 中非 0 值的个数 k（k不超过300000）；
第 2 行 —— 第 k+1 行：每一行代表矩阵 A 中的一个非 0 元素，包括两个整数和一个浮点数，分别代表该元素的 行号、列号、元素取值；
第 k+2 行 —— 第 k+m+1 行：每一行代表方程组中 b 的一个元素取值，按照在向量 b 中的顺序排列，为浮点数。
 
注：矩阵元素行列号均从 0 开始。
输出格式
共输出 m 行。
第 1 行 —— 第 m 行：每一行一个浮点数，依次代表解向量元素 xi，i=1, 2, ..., m。





健康膳食计划
时间限制: 5000 ms内存限制: 4000 KB
问题描述
小明同学想要控制自己的体重，为此他决定制定一个健康膳食计划，其目标是在保证身体必须的营养的前提下尽量少吃东西，由于每天能买到的食物种类众多，每种食物含有的营养物质又各不相同，所以他想要利用计算机帮助自己规划每日健康食谱，请你用所学《数据与算法》的知识帮助小明同学制定他的健康食谱。
输入格式
输入由三部分组成：
第1行前两个整数分别表示当日需要的营养物质种类数 N 和当日可以买到的食物种类数 M，其中 1<=N<=16，16种营养物质分别用编号0~15表示；1<=M<=216=65536，后 M 个整数分别表示当日能买到的 M 种食物各自对应的营养物质种类的数量；
第2行为 N 个整数，表示当日需要的营养物质列表，按数字大小升序排列；
第3~M+2行为每种食物自己含有的营养物质列表，按数字大小升序排列，且食物自身的序号按行数从上到下依次编为0~M - 1号，需要注意，食物中可能含有当日不需要的营养物质，对于此类营养物质可以摄入也可以不摄入。
输出格式
输出为1行，为当日计划吃的食物，用空格分隔，且按数字大小升序排列，如果没有合适的食谱，则输出-1，题目数据保证如果有解，则解是唯一的。







图书管理
时间限制: 1000 ms内存限制: 5120 KB
问题描述
在图书馆中，书籍的查询、借阅和归还是频繁的操作。为了有效地管理这些操作，图书馆管理系统使用链表来快速地查找、删除和添加书籍。某图书馆管理系统中，每本书上都有一个不同的ID。管理员需要输入操作指令和书本的ID进行指定操作，并知晓每项指令的操作结果。共有以下三种操作指令：
1——查询指定的书。若系统现有书籍中包含该书，操作结果为1；否则查询失败，操作结果为0。
2——借出指定的书。若系统现有书籍中包含该书，则将其借出，操作结果为1；否则借出失败，操作结果为0。
3——归还指定的书。若系统现有书籍中不含该书，则将其归还，操作结果为1；否则归还失败，操作结果为0。
请实现该图书管理系统。
输入格式
第一行：
n个已从小到大排列的无符号整数i，以空格分隔，各不相同，表示图书馆内现有书籍的ID。
第二行：
一个无符号整数m，表示需要执行操作指令的次数。
第二行以后的m行：
每行表示一次操作，包含操作指令与书本ID，以空格分隔。
每一行以换行符（'/n'）结束
输出格式
输出0与1组成的字符串，表示每次操作的结果。





红黑树
时间限制: 1000 ms内存限制: 5000 KB
问题描述
在数轴[1,+∞）上，给定一个整数数组可以将数轴划分为若干线段和一条射线。例如，数组[1,6,10,11,13]将数轴划分为：
称数组[1,6,10,11,13]为数轴的一个划分。
对划分定义了如下四种操作：
1、查找：输入一个正整数数组，返回该数组中每个元素所处线段或射线的起始。例如，查找[10,14]，则查找结果为[10,13]。
2、分割：输入一个正整数数组，用数组中每个元素将划分中原有线段（或射线）分割。例如，以[6,16]分割上述划分[1,6,10,11,13]，得到新的划分[1,6,10,11,13,16]。
3、合并：输入一个正整数数组，将数组中每个元素所处的线段和相邻的后一个线段（或射线）合并。例如，以[8,9]合并上述划分[1,6,10,11,13,16]，得到新的划分[1,6,11,13,16]。
4、打印：有序（树的中序遍历）打印当前划分。
试用红黑树实现上述划分的四种操作。
输入格式
首行（第1行）包含两个正整数 n>0, m>0。其中n为初始划分数组的元素个数，m为对划分执行的操作个数。
第2行给出初始划分数组中的n个元素（均为正整数，元素之间用空格分隔）。
第3行包含一个或两个正整数，第1个数字为第1次操作的编号p1（0表示查找，1表示分割，2表示合并，3表示打印），若p1!=3，则第2个数字为第1次操作的元素数目q1，否则该行仅输入一个数字。
若p1!=3，第4行给出第1次操作的q1个元素（均为正整数，元素之间用空格分隔）。
否则，第4行包含一个或两个正整数，第1个数字为第2次操作的编号p2（0表示查找，1表示分割，2表示合并，3表示打印），若p2!=3，则第2个数字为第2次操作的元素数目q2，否则该行仅有一个数字。
……
以此类推，直至所有m个操作的输入完成。
（注：n,m,q均为小于10万的正整数，输入的所有元素均在区间[1,231]上）
输出格式
按操作顺序，输出所有查询和打印操作的结果。
共m0+m3行，m0为查询操作的个数，m3为打印操作的个数。
每行输出一次操作的结果，元素之间用空格分隔。




寻找中位数
时间限制: 1000 ms内存限制: 5000 KB
问题描述
某公司的查询系统需要添加一种特殊的查询功能，该公司拜托你进行实现，功能定义如下：给定一个长为n的正整数序列T，以及对这个序列进行查询的次数m，每次查询的方式是：输入非负整数b，系统能够选择T中从序列下标0到序列下标b之间的子序列（包括下标0和下标b对应的数，下标从0开始），输出对应子序列的中位数。
输入格式
输入的第1行为两个正整数n和m，
输入的第2行为长为n的正整数序列T，
输入的第3行到第m+2行为一个非负整数b，表示查询的子序列范围。
对于所有测试样例，m和n均小于300000，T中的元素均小于100000。
输出格式
输出为m行，每行均为一个数，表示当次查询的中位数。





指数二次型函数的最小化
时间限制: 5000 ms内存限制: 10000 KB
问题描述
给定一个主对角强占优的对称正定矩阵 A 和向量 b，你的任务是找到一个向量 x，使得函数
最小化。
该问题等价于其梯度函数 g(x) = ∇f (x) = 0 这一非线性函数的求解，即
接下来，请你设计算法，寻找满足上述方程的解 x 。
输入格式
第一行包含一个整数 N，表示矩阵 A 和向量 b 的维度。
接下来 N 行，每行 N 个数字，描述矩阵 A。保证 A 是一个主对角强占优的正定矩阵。
接下来一行包含 N 个数字，描述向量 b。
输出格式
输出 f(x) 的最小值，此时 x 为 g(x) = 0 的解，结果保留到小数点后4位。
